
; == 13_if.ks ==============================================

; 条件分岐の資料集。

; ==========================================================
	
	
	
	; [set_default_view]
	; これは独自マクロです(→macro.ks)。
	; 解説画面を作成します。
	[set_default_view]
	
	
	
;-----------------------------------------------------------
*Part1
;-----------------------------------------------------------
	
	
	; 1度だけ表示される部分。
	
	
	; [ignore]～[endignore]
	; もしゲーム変数 f._a の中身が１ならば、
	; この間の記述をまるっと無視します。ignore(ｲｸﾞﾉｱ)=無視の意
	[ignore exp="f._a == 1"]
	
		; この部分はゲーム変数 f._a の中身が１ではない場合……
		; ……すなわち ①１以外の中身が入っている。もしくは②そもそも中身がない。
		; のどちらかのケースで実行されます。
		
		#akane
			この文章は１回だけ読まれる。[p]
	
	[endignore]
	
	; [eval]
	; ここを通過した証しとして f._a に 1 をぶち込む。
	[eval exp="f._a = 1"]
	
		; ※ まとめ ※
		;
		; 一度だけ行いたい処理がある場合、
		; 次のように記述すればよいです。
		; 
		;     [ignore exp="f.X == 1"]
		;         ;ここに一度だけ行いたい処理を書く
		;     [endignore][eval exp="f.X = 1"]
		;
		; ・セーブデータ単位で保存される変数である ゲーム変数(f.) を用いるか、
		; 　ゲーム単位で保存される変数である システム変数(sf.) を用いるかは、
		; 　ケースバイケースで考えてみてください。
		; ・変数の名前は適宜わかりやすいものに変えてください。
		; ・変数にぶち込む/チェックする数値が1である必然性は別段ありません。
		;
		; Ｑ．なぜこの記述でそのような挙動になるのですか？
		;
		; Ａ．ゲームを新規に始めたときというのは、f.Xに何も入っていません。
		; 　　何も入っていないのですから、「f.Xの中身は1か？」という条件は満たされません。
		; 　　したがって[ignore]～[endignore]の間の記述は無視されることなく、しっかり読まれます。
		; 　　しかしその後、[eval]によってf.Xに1が入ります。
		; 　　これによって、次からは[ignore]が作動します。
	
	
	
;-----------------------------------------------------------
*Part2
;-----------------------------------------------------------
	
	
	; この資料編を最後まで読んでからもう一度来ると表示される部分。
	
	
	; [if]～[endif]
	; もしゲーム変数 f._b の中身が１ならば、
	; この間の記述を読み込みます。
	[if exp="f._b == 1"]
	
		; この部分はゲーム変数 f._b の中身が１の場合に読み込まれます。
		
		#akane
			この文章は資料編を最後まで読んでからのみ表示される。[p]
	
	[endif]
	
	
		; ※ まとめ ※
		;
		; シナリオの〈ある部分〉を通過してからのみ実行したいスクリプトは、
		; 次のように記述すればよいです。
		; 
		;     [if exp="f.X == 1"]
		;         ;ここに条件を満たした場合のみ実行したいスクリプトを書く
		;     [endif]
		;
		;
		;     ～省略～
		;
		;
		;     ;〈ある部分〉
		;     [eval exp="f.X = 1"]
		;
		; ・セーブデータ単位で保存される変数である ゲーム変数(f.) を用いるか、
		; 　ゲーム単位で保存される変数である システム変数(sf.) を用いるかは、
		; 　ケースバイケースで考えてみてください。
		; ・変数の名前は適宜わかりやすいものに変えてください。
		; ・変数にぶち込む/チェックする数値が1である必然性は別段ありません。
		;
		; Ｑ．なぜこの記述でそのような挙動になるのですか？
		;
		; Ａ．ゲームを新規に始めたときというのは、f.Xに何も入っていません。
		; 　　何も入っていないのですから、「f.Xの中身は1か？」という条件は満たされません。
		; 　　したがって[if]～[enfif]の間の記述は飛ばされます。
		; 　　しかしその後、〈ある部分〉を通過すると[eval]によってf.Xに1が入ります。
		; 　　これによって、次からは[if]の条件が満たされるので、[if]～[enfif]の間の記述が読まれます。
	
	
	
;-----------------------------------------------------------
*Part3
;-----------------------------------------------------------
	
	#akane
		変数の値によってフェイスを変えてみる。
	
	; [image]×２
	; HPの外枠を表示します。
	[image storage="color/white.png" layer="2" left="340" top="30" width="308" height="38"]
	[image storage="color/black.png" layer="2" left="344" top="34" width="300" height="30"]
	
	; [chara_new][chara_face][chara_show]
	; HPバーを定義および表示します。
	; (HPバーは条件によって色を変えたいので、キャラクターとして定義しているのです。)
	[chara_new      name="HP"          storage="color/col1.png"]
		[chara_face name="HP" face="A" storage="color/col1.png"]
		[chara_face name="HP" face="B" storage="color/col3.png"]
		[chara_face name="HP" face="C" storage="color/col4.png"]
	[chara_show     name="HP" face="B" layer="2" left="344" top="34" width="0" height="30" time="0"]
	
	; [eval][anim]
	; 変数f.HPに初期値として150を入れ、HPバーの幅をその値までアニメーションさせます。
	; width属性の値を「&」で始めることで、それ以降の文字をJavaScriptの式として評価させます。
	; "f.HP"という文字そのものではなく、変数としてのf.HPの中身をwidth属性に与えているわけですね。
	; この機能をエンティティといいます。
	[eval exp=" f.HP = 150 "]
	[anim name="HP" width="& f.HP" effect="linear" time="700"]
	[wa]
	
	
	;-------------------------------------------------------
	*Part3.Glinks
	;-------------------------------------------------------
		
		
		; 選択肢の表示
		
		
		; [glink]×３
		; 選択肢を表示します。
		; exp属性に着目してください！
		; 計算用に、一時変数 tf.damage にダメージ量をぶち込んでいます。
		; ｢なでる｣は回復なので、ダメージ量にはマイナスを指定しています。
		[glink target="*Part3.1" text="どつく" y="330" color="red"   size="24" x="220" width="30" height="100" exp=" tf.damage =   70 "]
		[glink target="*Part3.1" text="なでる" y="330" color="pink"  size="24" x="430" width="30" height="100" exp=" tf.damage = - 70 "]
		[glink target="*Part3.2" text="次へ"   y="330" color="white" size="24" x="640" width="30" height="100"]
		[s]
	
	
	
	;-------------------------------------------------------
	*Part3.1
	;-------------------------------------------------------
		
		
		; HPの増減処理　このあたりは複雑な処理をしていますので、読み飛ばし推奨
		
		
		; [iscript]～[endscript]
		; f.HP から tf.damage 分を引きます。
		; このとき、f.HPの値が最終的に0以上・300以下になることを保証するために、特殊な処理をしています。
		; このあたりはかなりプログラミング的な話になってくるので、無視してよいです。
		; (ここは条件分岐の本筋ではありません。が、勉強したい方はこちらをどうぞ→https://techacademy.jp/magazine/5411)
		[iscript]
			f.HP = f.HP - tf.damage
			if (f.HP <   0) f.HP =   0
			if (f.HP > 300) f.HP = 300
		[endscript]
				; ※ 難しい補足・JavaScripter向け ※
				; 実は上記の[iscript]～[endscript]の内容は、次のタグで置き換えることが可能です。
				;
				;     [eval exp=" f.HP = Math.min(300, Math.max(0, f.HP - tf.damage)) "]
				;
				; 最小値をとる関数と最大値をとる関数をうまく利用しているわけですね。
		
		
		; [anim]
		; HPバーの幅をアニメーションさせながら変更します。
		[anim name="HP" width="& f.HP + '' " effect="linear" time="400"][wa]
				; ※ 難しい補足 ※
				; width属性のエンティティにおいて、ちょっとしたバグ対策で「 + '' 」という式を入れています。
				; あまり本筋ではないですから、
				; 計算したf.HPの値を利用して、[anim]で幅をアニメーションさせているんだ、
				; ということだけ掴んでいただければよいと思います。
		
		
		; HPの値に応じてキャラクターフェイスを変更する
		
		
		; [if]～[endif]
		; こちらが本筋です。
		; HPが200以上、100以下、それ以外、で分岐させて、
		; キャラクターフェイスを切り替えています。
		[if    exp="f.HP > 200"]
			[chara_mod name="akane" face="happy"   time="200"  wait="false" cross="false"]
			[chara_mod name="HP"    face="A"       time="200" cross="false"]
		[elsif exp="f.HP < 100"]
			[chara_mod name="akane" face="sad"     time="200"  wait="false" cross="false"]
			[chara_mod name="HP"    face="C"       time="200" cross="false"]
		[else                  ]
			[chara_mod name="akane" face="default" time="200"  wait="false" cross="false"]
			[chara_mod name="HP"    face="B"       time="200" cross="false"]
		[endif]
		
		; [jump]
		; 選択肢に戻ります。
		[jump target="*Part3.Glinks"]
	
	
	
	;-------------------------------------------------------
	*Part3.2
	;-------------------------------------------------------
		
		#akane
			変数の値によってシナリオを変えてみる。[p]
			
		; [if]～[endif]
		; HPが200以上、100以下、それ以外、で分岐させて、それぞれ違うテキストを表示しています。
		; ここでは、表示するテキストが少しなのでテキストを直接[if]～[endif]内に書き込んでしまっていますが、
		; 実際にノベルゲームで長いルート分岐に用いる場合は、
		; 直接ここにテキストを書くのではなく、
		; [jump]タグで別のラベルに飛ばしたほうがよいでしょう。
		; その際、不都合がなければジャンプ先に[clearstack]を置いてスタックを掃除しましょう。
		[if    exp="f.HP > 200"]
			なでてくれてありがとう！[p]
		[elsif exp="f.HP < 100"]
			どつきまわしてくれてありがとう……。[p]
		[else]
			遊んでくれてありがとね～。[p]
		[endif]
	
	
	
;-----------------------------------------------------------
*Part4
;-----------------------------------------------------------
	
	#akane
		以上です[p]
	
	; [eval]
	; ここまで読んだ証しとして f._b に 1 をぶち込む。
	[eval exp="f._b = 1"]
	
	[jump storage="select.ks"]