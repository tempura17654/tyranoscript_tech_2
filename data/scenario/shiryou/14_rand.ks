
; == 14_rand.ks ============================================

; 乱数の資料集。

; ==========================================================
	
	
	
	; [set_default_view]
	; これは独自マクロです(→macro.ks)。
	; 解説画面を作成します。
	[set_default_view]
	
	
	
;-----------------------------------------------------------
*Part1
;-----------------------------------------------------------
	
	#akane
		１個のサイコロを振る。[p]
	
	; [getrand]
	; これは乱数を簡単に扱うための独自マクロです（→macro.ks）。
	; 1以上6以下のランダムな整数をtf.randにセットします。
	[getrand min="1" max="6"]
		
		; [emb]
		; このタグは、変数の中身をテキストとして出力するタグです。
		[emb exp="tf.rand"]、[l]
	
	; [getrand]
	; var属性に変数の名前を指定することで、
	; その変数に乱数を格納することができます。
	[getrand min="1" max="6" var="f.a"]
		
		[emb exp="f.a"]、[l]
	
	; [getrand]
	; var属性を指定した場合でも、tf.randに値が残ります。
	[getrand min="1" max="6" var="f.a"]
		
		[emb exp="tf.rand"]……。[p]
	
	
	
;-----------------------------------------------------------
*Part2
;-----------------------------------------------------------
	
	#akane
		一定の確率で成功するイベント。
	
	; [glink]
	; 選択肢を出します。
	[glink target="*Part2.1" text="80%の確率で成功" y="110" color="blue"  size="24" x="220" width="440"]
	[glink target="*Part2.2" text="50%の確率で成功" y="190" color="green" size="24" x="220" width="440"]
	[glink target="*Part2.3" text="20%の確率で成功" y="270" color="red"   size="24" x="220" width="440"]
	[glink target="*Part3"   text="次へ"            y="350" color="black" size="24" x="220" width="440"]
	[s]
	
	
	
	;-------------------------------------------------------
	*Part2.1
	;-------------------------------------------------------
		
		; [getrand]
		; 1以上100以下の乱数をゲットします。
		; 乱数は1～100の100通りですね。
		[getrand min="1" max="100"]
		
		; [if]～[endif]
		; 1～80ならば成功ラベルに、そうでなければ失敗ラベルにジャンプ。
		; つまり、成功率は80％です。
		[if exp="tf.rand <= 80"][jump target="*Part2.Seikou"]
		[else][jump target="*Part2.Shippai"]
		[endif]
		
		
		
	;-------------------------------------------------------
	*Part2.1
	;-------------------------------------------------------
		
		[getrand min="1" max="100"]
		[if exp="tf.rand <= 80"][jump target="*Part2.Seikou"]
		[else][jump target="*Part2.Shippai"]
		[endif]
		
		
		
	;-------------------------------------------------------
	*Part2.2
	;-------------------------------------------------------
		
		[getrand min="1" max="100"]
		[if exp="tf.rand <= 50"][jump target="*Part2.Seikou"]
		[else][jump target="*Part2.Shippai"]
		[endif]
		
		
		
	;-------------------------------------------------------
	*Part2.3
	;-------------------------------------------------------
		
		[getrand min="1" max="100"]
		[if exp="tf.rand <= 20"][jump target="*Part2.Seikou"]
		[else][jump target="*Part2.Shippai"]
		[endif]
		
		
		
	;-------------------------------------------------------
	*Part2.Seikou
	;-------------------------------------------------------
		
		; [clearstack]
		; スタックを掃除します。
		; [if]の中で[jump]タグを使うとスタックが溜まって良くないので、
		; ジャンプ先で[clearstack]を使ってスタックの掃除をすると良いでしょう。
		[clearstack]
		
		#akane
			[font color="yellow"]成功しました!![l][cm]
		
		[jump target="*Part2"]
		
		
		
	;-------------------------------------------------------
	*Part2.Shippai
	;-------------------------------------------------------
		
		[clearstack]
		#akane
			失敗しました……。[p]
		[jump target="*Part2"]
	
	
	
;-----------------------------------------------------------
*Part3
;-----------------------------------------------------------
	
	#akane
		複数のラベルからランダムに選択してジャンプ。[p]
	
	
	
	;-------------------------------------------------------
	*Part3.Jump
	;-------------------------------------------------------
		
		; [getrandname]
		; これは乱数を簡単に扱うための独自マクロです（→macro.ks）。
		; name属性内の{R}を「min属性～max属性のランダムな整数」で置換した文字列を、
		; 一時変数tf.randnameに格納します。
		; たとえば、name="*label_{R}" min="1" max="3"と指定した場合、
		;
		;     *label_1    *label_2    *label_3
		;
		; のうちからランダムでひとつ決定されるということです。
		; var属性に変数名を指定すると（var="f.a"のように）、
		; その変数に格納するようにできます。その場合でも、tf.randnameに値は残ります。
		[getrandname name="*Part3.{R}" min="1" max="3"]
		
		; [jump]
		; 生成した変数を利用して、ジャンプします。
		; 属性の値を入力するときに、値の先頭に「&」の記号を付けると、
		; それに続く文字をJavaScriptの式として評価します。
		; ようするに、変数の中身を指定できるということです。
		; 下の場合なら、単に"tf.randname"とすると「『tf.randname』なんてターゲットはないよ」と言われますが、
		; "& tf.randname"としているので、「変数『tf.randname』の中身は'*Part3.1'か……じゃあそこに飛ぶね」となります。
		[jump target="& tf.randname"]
		
		
		
	;-------------------------------------------------------
	*Part3.Glinks
	;-------------------------------------------------------
		
		[glink target="*Part3.Jump" text="もう一度" y="240" color="black" size="24" x="220" width="440"]
		[glink target="*Part4"      text="次へ"     y="320" color="black" size="24" x="220" width="440"]
		[s]
	
	
	
	;-------------------------------------------------------
	*Part3.1
	;-------------------------------------------------------
		
		[cm]ここはラベル*Part3.1。
		[jump target="*Part3.Glinks"] 
	
	
	
	;-------------------------------------------------------
	*Part3.2
	;-------------------------------------------------------
		
		[cm]ここはラベル*Part3.2。
		[jump target="*Part3.Glinks"] 
	
	
	
	;-------------------------------------------------------
	*Part3.3
	;-------------------------------------------------------
		
		[cm]ここはラベル*Part3.3。
		[jump target="*Part3.Glinks"] 
	
	
	
;-----------------------------------------------------------
*Part4
;-----------------------------------------------------------
	
	#akane
		複数の画像からランダムにひとつ選んで表示してみる。[p]
	
	; [iscript]～[endscript]
	; のちのち使うことになるgetRandItemを準備しています。
	; わかりやすさのためにここに記していますが、
	; 通常はfirst.ksに1回記述すればそれでよいです(毎回記述する必要はまったくない)。
	[iscript]
		window.getRandItem = function (array) {
			return array[Math.floor(Math.random()*array.length)]
		}
	[endscript]
	
	;-------------------------------------------------------
	*Part4.1
	;-------------------------------------------------------
	
	; [iscript]～[endscript]
	; 準備しておいたgetRandItemを使って
	; 複数の項目からランダムに1個の項目をゲット。
	; それを一時変数にぶち込みます。
	[iscript]
		tf.item = getRandItem([
			 "eki.jpg"
			,"eki_shinya.jpg"
			,"mori.jpg"
			,"room.jpg"
			,"rouka.jpg"
			,"umi.jpg"
		])
	[endscript]
	
	[bg storage="& tf.item" time="700"]
		
	[glink target="*Part4.1" text="もう一度" y="240" color="black" size="24" x="220" width="440"]
	[glink target="*Part5"   text="次へ"     y="320" color="black" size="24" x="220" width="440"]
	[s]
	
	
	
;-----------------------------------------------------------
*Part5
;-----------------------------------------------------------
	
	
	#akane
		[cm]じゃんけんゲーム。
	
	; [glink]
	; 選択肢を出します。
	; exp属性を利用して、自分の手をf.selfに格納していることに着目してください。
	; ちなみに、「ぐー」とか「ちょき」のような文字列を変数にぶち込むときは、
	; 文字を「'」の記号（引用符）で挟みます。
	; (これは変数名との区別のため。もし引用符で挟んであげなかった場合、
	; プログラムは「ぐー」という名前の変数を探しに行ってしまいます。
	; もちろん、そんなものは見つかりません。
	; 引用符で挟んであげることで、「ぐー」という【文字列】を値として入れたいんだ、
	; ということがプログラムに伝わります。)
	[glink target="*Part5.1" text="ぐー"   y="110" color="blue"  size="24" x="220" width="440" exp=" f.self = 'ぐー'   "]
	[glink target="*Part5.1" text="ちょき" y="190" color="green" size="24" x="220" width="440" exp=" f.self = 'ちょき' "]
	[glink target="*Part5.1" text="ぱー"   y="270" color="red"   size="24" x="220" width="440" exp=" f.self = 'ぱー'   "]
	[glink target="*Part6"   text="次へ"   y="350" color="black" size="24" x="220" width="440"]
	[s]
	
	
	
	;-------------------------------------------------------
	*Part5.1
	;-------------------------------------------------------
	
	; [getrand][if]～[endif]
	; 1～3の乱数を生成→[if]分岐でチェック。
	; f.enemyに相手の手をセットします。
	[getrand min="1" max="3"]
	[if    exp=" tf.rand == 1 "][eval exp=" f.enemy = 'ぐー'   "]
	[elsif exp=" tf.rand == 2 "][eval exp=" f.enemy = 'ちょき' "]
	[else                      ][eval exp=" f.enemy = 'ぱー'   "]
	[endif]
	
	; [if][endif]
	; [if]を入れ子にして、勝ち負けのチェックを行います。
	; ここでは、[if]～[endif]の中に「テキスト出力＋クリック待ち＋ジャンプ」
	; という処理を全部入れていますが、
	; のちのちゲームを本格的にしていくことを考えると、
	; ｢勝利ラベル｣｢敗北ラベル｣｢あいこラベル｣を別々に作成し、
	; それぞれのラベルに飛ばして処理を行ったほうがよいです。
	; (勝利、敗北、あいこ時の処理が共通に書けるので。)
	[if    exp=" f.self == 'ぐー'   "]
		[if    exp=" f.enemy == 'ぐー'   "]私もぐーを出したので、、あいこです。。。。[p][jump target="*Part5"]
		[elsif exp=" f.enemy == 'ちょき' "]私はちょきを出したので、あなたの勝ちです。[p][jump target="*Part5"]
		[else                             ]私はぱーを出したので、、あなたの負けです。[p][jump target="*Part5"]
		[endif]
	[elsif exp=" f.self == 'ちょき' "]
		[if    exp=" f.enemy == 'ぐー'   "]私はぐーを出したので、、あなたの負けです。[p][jump target="*Part5"]
		[elsif exp=" f.enemy == 'ちょき' "]私もちょきを出したので、あいこです。。。。[p][jump target="*Part5"]
		[else                             ]私はぱーを出したので、、あなたの勝ちです。[p][jump target="*Part5"]
		[endif]
	[else                            ]
		[if    exp=" f.enemy == 'ぐー'   "]私はぐーを出したので、、あなたの勝ちです。[p][jump target="*Part5"]
		[elsif exp=" f.enemy == 'ちょき' "]私はちょきを出したので、あなたの負けです。[p][jump target="*Part5"]
		[else                             ]私もぱーを出したので、、あいこです。。。。[p][jump target="*Part5"]
		[endif]
	[endif]
	
	
	
;-----------------------------------------------------------
*Part6
;-----------------------------------------------------------
	#akane
		以上です[p]
	
	

	[jump storage="select.ks"]